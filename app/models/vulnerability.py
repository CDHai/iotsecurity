from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import json
import enum

db = SQLAlchemy()

class VulnerabilitySeverity(enum.Enum):
    """Vulnerability severity enumeration"""
    INFO = 'info'
    LOW = 'low'
    MEDIUM = 'medium'
    HIGH = 'high'
    CRITICAL = 'critical'

class Vulnerability(db.Model):
    """Vulnerability model"""
    __tablename__ = 'vulnerabilities'
    
    vuln_id = db.Column(db.Integer, primary_key=True)
    cve_id = db.Column(db.String(20), unique=True, nullable=True, index=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    
    # Severity and scoring
    severity = db.Column(db.Enum(VulnerabilitySeverity), nullable=False)
    cvss_score = db.Column(db.Float, nullable=True)
    cvss_vector = db.Column(db.String(100), nullable=True)
    
    # Affected devices and systems
    affected_devices = db.Column(db.Text, nullable=True)  # JSON array
    affected_manufacturers = db.Column(db.Text, nullable=True)  # JSON array
    affected_models = db.Column(db.Text, nullable=True)  # JSON array
    
    # Vulnerability details
    vulnerability_type = db.Column(db.String(50), nullable=True)
    attack_vector = db.Column(db.String(50), nullable=True)
    impact = db.Column(db.Text, nullable=True)
    remediation = db.Column(db.Text, nullable=True)
    
    # References and metadata
    references = db.Column(db.Text, nullable=True)  # JSON array
    published_date = db.Column(db.Date, nullable=True)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    
    # Status
    is_active = db.Column(db.Boolean, default=True, nullable=False)
    is_verified = db.Column(db.Boolean, default=False, nullable=False)
    
    # Relationships
    test_results = db.relationship('TestResult', backref='vulnerability', lazy='dynamic')
    
    def __init__(self, title, severity, description=None, cve_id=None):
        self.title = title
        self.severity = severity
        self.description = description
        self.cve_id = cve_id
    
    @property
    def affected_devices_list(self):
        """Get affected devices as list"""
        if self.affected_devices:
            return json.loads(self.affected_devices)
        return []
    
    @affected_devices_list.setter
    def affected_devices_list(self, devices):
        """Set affected devices from list"""
        self.affected_devices = json.dumps(devices) if devices else None
    
    @property
    def affected_manufacturers_list(self):
        """Get affected manufacturers as list"""
        if self.affected_manufacturers:
            return json.loads(self.affected_manufacturers)
        return []
    
    @affected_manufacturers_list.setter
    def affected_manufacturers_list(self, manufacturers):
        """Set affected manufacturers from list"""
        self.affected_manufacturers = json.dumps(manufacturers) if manufacturers else None
    
    @property
    def affected_models_list(self):
        """Get affected models as list"""
        if self.affected_models:
            return json.loads(self.affected_models)
        return []
    
    @affected_models_list.setter
    def affected_models_list(self, models):
        """Set affected models from list"""
        self.affected_models = json.dumps(models) if models else None
    
    @property
    def references_list(self):
        """Get references as list"""
        if self.references:
            return json.loads(self.references)
        return []
    
    @references_list.setter
    def references_list(self, references):
        """Set references from list"""
        self.references = json.dumps(references) if references else None
    
    def is_affecting_device(self, device):
        """Check if vulnerability affects specific device"""
        # Check device type
        if device.device_type and device.device_type.value in self.affected_devices_list:
            return True
        
        # Check manufacturer
        if device.manufacturer and device.manufacturer in self.affected_manufacturers_list:
            return True
        
        # Check model
        if device.model and device.model in self.affected_models_list:
            return True
        
        return False
    
    def get_risk_score(self):
        """Calculate risk score based on severity and CVSS"""
        base_score = {
            VulnerabilitySeverity.CRITICAL: 10.0,
            VulnerabilitySeverity.HIGH: 7.5,
            VulnerabilitySeverity.MEDIUM: 5.0,
            VulnerabilitySeverity.LOW: 2.5,
            VulnerabilitySeverity.INFO: 1.0
        }
        
        if self.cvss_score:
            return min(self.cvss_score, 10.0)
        
        return base_score.get(self.severity, 5.0)
    
    def get_vulnerability_info(self):
        """Get comprehensive vulnerability information"""
        return {
            'vuln_id': self.vuln_id,
            'cve_id': self.cve_id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity.value if self.severity else None,
            'cvss_score': self.cvss_score,
            'cvss_vector': self.cvss_vector,
            'affected_devices': self.affected_devices_list,
            'affected_manufacturers': self.affected_manufacturers_list,
            'affected_models': self.affected_models_list,
            'vulnerability_type': self.vulnerability_type,
            'attack_vector': self.attack_vector,
            'impact': self.impact,
            'remediation': self.remediation,
            'references': self.references_list,
            'published_date': self.published_date.isoformat() if self.published_date else None,
            'last_updated': self.last_updated.isoformat() if self.last_updated else None,
            'is_active': self.is_active,
            'is_verified': self.is_verified,
            'risk_score': self.get_risk_score()
        }
    
    def update_last_updated(self):
        """Update last updated timestamp"""
        self.last_updated = datetime.utcnow()
        db.session.commit()
    
    def __repr__(self):
        return f'<Vulnerability {self.cve_id or self.title} ({self.severity.value})>'
